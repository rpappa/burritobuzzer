// Generated by https://quicktype.io

export interface Timeline {
    data: Data;
}

export interface Data {
    user: User;
}

export interface User {
    result: UserResult;
}

export interface UserResult {
    __typename: string;
    timeline_v2: TimelineV2;
}

export interface TimelineV2 {
    timeline: TimelineClass;
}

export interface TimelineClass {
    instructions: Instruction[];
    responseObjects: ResponseObjects;
}

export interface Instruction {
    type: string;
    entries?: EntryElement[];
    entry?: PurpleEntry;
}

export interface EntryElement {
    entryId: string;
    sortIndex: string;
    content: PurpleContent;
}

export interface PurpleContent {
    entryType: string;
    __typename: string;
    itemContent?: PurpleItemContent;
    value?: string;
    cursorType?: string;
    stopOnEmptyResponse?: boolean;
}

export interface PurpleItemContent {
    itemType: string;
    __typename: string;
    tweet_results: PurpleTweetResults;
    tweetDisplayType: string;
    ruxContext: string;
}

export interface PurpleTweetResults {
    result: PurpleResult;
}

export interface PurpleResult {
    __typename: string;
    rest_id: string;
    core: SourceUserClass;
    edit_control: EditControl;
    is_translatable: boolean;
    views: Views;
    source: string;
    note_tweet?: NoteTweet;
    legacy: FluffyLegacy;
    quick_promote_eligibility: QuickPromoteEligibility;
    unmention_data?: UnmentionData;
    card?: Card;
    unified_card?: UnifiedCard;
    quoted_status_result?: QuotedStatusResult;
}

export interface Card {
    rest_id: string;
    legacy: CardLegacy;
}

export interface CardLegacy {
    binding_values: BindingValue[];
    card_platform: CardPlatform;
    name: string;
    url: string;
    user_refs_results: any[];
}

export interface BindingValue {
    key: string;
    value: Value;
}

export interface Value {
    image_value?: ImageValue;
    type: string;
    string_value?: string;
    scribe_key?: string;
    image_color_value?: ImageColorValue;
}

export interface ImageColorValue {
    palette: Palette[];
}

export interface Palette {
    rgb: RGB;
    percentage: number;
}

export interface RGB {
    blue: number;
    green: number;
    red: number;
}

export interface ImageValue {
    alt: string;
    height: number;
    width: number;
    url: string;
}

export interface CardPlatform {
    platform: Platform;
}

export interface Platform {
    audience: Audience;
    device: Device;
}

export interface Audience {
    name: string;
}

export interface Device {
    name: string;
    version: string;
}

export interface SourceUserClass {
    user_results: SourceUserUserResults;
}

export interface SourceUserUserResults {
    result: FluffyResult;
}

export interface FluffyResult {
    __typename: string;
    id: string;
    rest_id: string;
    affiliates_highlighted_label: UnmentionData;
    is_blue_verified: boolean;
    profile_image_shape: string;
    legacy: PurpleLegacy;
    professional: Professional;
}

export interface UnmentionData {}

export interface PurpleLegacy {
    created_at: string;
    default_profile: boolean;
    default_profile_image: boolean;
    description: string;
    entities: PurpleEntities;
    fast_followers_count: number;
    favourites_count: number;
    followers_count: number;
    friends_count: number;
    has_custom_timelines: boolean;
    is_translator: boolean;
    listed_count: number;
    location: string;
    media_count: number;
    name: string;
    normal_followers_count: number;
    pinned_tweet_ids_str: string[];
    possibly_sensitive: boolean;
    profile_banner_url: string;
    profile_image_url_https: string;
    profile_interstitial_type: string;
    screen_name: string;
    statuses_count: number;
    translator_type: string;
    url?: string;
    verified: boolean;
    verified_type?: string;
    withheld_in_countries: any[];
}

export interface PurpleEntities {
    description: Description;
    url?: Description;
}

export interface Description {
    urls: URL[];
}

export interface URL {
    display_url: string;
    expanded_url: string;
    url: string;
    indices: number[];
}

export interface Professional {
    rest_id: string;
    professional_type: string;
    category: Category[];
}

export interface Category {
    id: number;
    name: string;
    icon_name: string;
}

export interface EditControl {
    edit_tweet_ids: string[];
    editable_until_msecs: string;
    is_edit_eligible: boolean;
    edits_remaining: string;
}

export interface FluffyLegacy {
    bookmark_count: number;
    bookmarked: boolean;
    created_at: string;
    conversation_id_str: string;
    display_text_range: number[];
    entities: Entit;
    favorite_count: number;
    favorited: boolean;
    full_text: string;
    in_reply_to_screen_name?: string;
    in_reply_to_status_id_str?: string;
    in_reply_to_user_id_str?: string;
    is_quote_status: boolean;
    lang: string;
    quote_count: number;
    reply_count: number;
    retweet_count: number;
    retweeted: boolean;
    user_id_str: string;
    id_str: string;
    self_thread?: SelfThread;
    extended_entities?: ExtendedEntities;
    possibly_sensitive?: boolean;
    possibly_sensitive_editable?: boolean;
    retweeted_status_result?: RetweetedStatusResult;
    place?: Place;
    quoted_status_id_str?: string;
    quoted_status_permalink?: QuotedStatusPermalink;
}

export interface Entit {
    user_mentions: UserMention[];
    urls: URL[];
    hashtags: Hashtag[];
    symbols: any[];
    media?: EntitiesMedia[];
}

export interface Hashtag {
    indices: number[];
    text: string;
}

export interface EntitiesMedia {
    display_url: string;
    expanded_url: string;
    id_str: string;
    indices: number[];
    media_url_https: string;
    type: string;
    url: string;
    features: Features;
    sizes: Sizes;
    original_info: OriginalInfo;
    source_status_id_str?: string;
    source_user_id_str?: string;
}

export interface Features {
    large?: OrigClass;
    medium?: OrigClass;
    small?: OrigClass;
    orig?: OrigClass;
    all?: All;
}

export interface All {
    tags: Tag[];
}

export interface Tag {
    user_id: string;
    name: string;
    screen_name: string;
    type: string;
}

export interface OrigClass {
    faces: FocusRect[];
}

export interface FocusRect {
    x: number;
    y: number;
    h: number;
    w: number;
}

export interface OriginalInfo {
    height: number;
    width: number;
    focus_rects?: FocusRect[];
}

export interface Sizes {
    large: ThumbClass;
    medium: ThumbClass;
    small: ThumbClass;
    thumb: ThumbClass;
}

export interface ThumbClass {
    h: number;
    w: number;
    resize: string;
}

export interface UserMention {
    id_str: string;
    name: string;
    screen_name: string;
    indices: number[];
}

export interface ExtendedEntities {
    media: ExtendedEntitiesMedia[];
}

export interface ExtendedEntitiesMedia {
    display_url: string;
    expanded_url: string;
    id_str: string;
    indices: number[];
    media_key: string;
    media_url_https: string;
    type: string;
    url: string;
    ext_media_availability: EXTMediaAvailability;
    features: Features;
    sizes: Sizes;
    original_info: OriginalInfo;
    source_status_id_str?: string;
    source_user_id_str?: string;
    additional_media_info?: AdditionalMediaInfo;
    mediaStats?: MediaStats;
    video_info?: VideoInfo;
}

export interface AdditionalMediaInfo {
    monetizable: boolean;
    source_user?: SourceUserClass;
}

export interface EXTMediaAvailability {
    status: string;
}

export interface MediaStats {
    viewCount: number;
}

export interface VideoInfo {
    aspect_ratio: number[];
    duration_millis: number;
    variants: Variant[];
}

export interface Variant {
    bitrate?: number;
    content_type: string;
    url: string;
}

export interface Place {
    attributes: UnmentionData;
    bounding_box: BoundingBox;
    contained_within: any[];
    country: string;
    country_code: string;
    full_name: string;
    name: string;
    id: string;
    place_type: string;
    url: string;
}

export interface BoundingBox {
    coordinates: Array<Array<number[]>>;
    type: string;
}

export interface QuotedStatusPermalink {
    url: string;
    expanded: string;
    display: string;
}

export interface RetweetedStatusResult {
    result: RetweetedStatusResultResult;
}

export interface RetweetedStatusResultResult {
    __typename: string;
    rest_id: string;
    core: PurpleCore;
    edit_control: EditControl;
    is_translatable: boolean;
    views: Views;
    source: string;
    legacy: TentacledLegacy;
}

export interface PurpleCore {
    user_results: PurpleUserResults;
}

export interface PurpleUserResults {
    result: TentacledResult;
}

export interface TentacledResult {
    __typename: string;
    id: string;
    rest_id: string;
    affiliates_highlighted_label: UnmentionData;
    is_blue_verified: boolean;
    profile_image_shape: string;
    legacy: PurpleLegacy;
    professional?: Professional;
}

export interface TentacledLegacy {
    bookmark_count: number;
    bookmarked: boolean;
    created_at: string;
    conversation_id_str: string;
    display_text_range: number[];
    entities: Entit;
    extended_entities: ExtendedEntities;
    favorite_count: number;
    favorited: boolean;
    full_text: string;
    is_quote_status: boolean;
    lang: string;
    possibly_sensitive: boolean;
    possibly_sensitive_editable: boolean;
    quote_count: number;
    reply_count: number;
    retweet_count: number;
    retweeted: boolean;
    user_id_str: string;
    id_str: string;
    self_thread?: SelfThread;
}

export interface SelfThread {
    id_str: string;
}

export interface Views {
    count?: string;
    state: string;
}

export interface NoteTweet {
    is_expandable: boolean;
    note_tweet_results: NoteTweetResults;
}

export interface NoteTweetResults {
    result: NoteTweetResultsResult;
}

export interface NoteTweetResultsResult {
    id: string;
    text: string;
    entity_set: Entit;
    richtext: Richtext;
}

export interface Richtext {
    richtext_tags: any[];
}

export interface QuickPromoteEligibility {
    eligibility: string;
}

export interface QuotedStatusResult {
    result: QuotedStatusResultResult;
}

export interface QuotedStatusResultResult {
    __typename: string;
    rest_id: string;
    core: PurpleCore;
    unmention_data?: UnmentionData;
    edit_control: EditControl;
    is_translatable: boolean;
    views: Views;
    source: string;
    legacy: StickyLegacy;
}

export interface StickyLegacy {
    bookmark_count: number;
    bookmarked: boolean;
    created_at: string;
    conversation_id_str: string;
    display_text_range: number[];
    entities: FluffyEntities;
    favorite_count: number;
    favorited: boolean;
    full_text: string;
    is_quote_status: boolean;
    lang: string;
    quote_count: number;
    reply_count: number;
    retweet_count: number;
    retweeted: boolean;
    user_id_str: string;
    id_str: string;
    self_thread?: SelfThread;
}

export interface FluffyEntities {
    user_mentions: any[];
    urls: any[];
    hashtags: Hashtag[];
    symbols: any[];
}

export interface UnifiedCard {
    card_fetch_state: string;
}

export interface PurpleEntry {
    entryId: string;
    sortIndex: string;
    content: FluffyContent;
}

export interface FluffyContent {
    entryType: string;
    __typename: string;
    itemContent: FluffyItemContent;
    clientEventInfo: ClientEventInfo;
}

export interface ClientEventInfo {
    component: string;
    details: Details;
}

export interface Details {
    timelinesDetails: TimelinesDetails;
}

export interface TimelinesDetails {
    injectionType: string;
}

export interface FluffyItemContent {
    itemType: string;
    __typename: string;
    tweet_results: FluffyTweetResults;
    tweetDisplayType: string;
    ruxContext: string;
    socialContext: SocialContext;
}

export interface SocialContext {
    type: string;
    contextType: string;
    text: string;
}

export interface FluffyTweetResults {
    result: StickyResult;
}

export interface StickyResult {
    __typename: string;
    rest_id: string;
    core: SourceUserClass;
    edit_control: EditControl;
    is_translatable: boolean;
    views: Views;
    source: string;
    legacy: StickyLegacy;
    quick_promote_eligibility: QuickPromoteEligibility;
}

export interface ResponseObjects {
    feedbackActions: any[];
    immediateReactions: any[];
}

type ParsedTweet = {
    createdAt: string;
    text: string;
    id: string;
    restId: string;
    username: string;
    image?: string;
};

export function parseTimelineV2(timeline: TimelineV2): ParsedTweet[] {
    const parsedTweets: ParsedTweet[] = [];

    for (const instruction of timeline.timeline.instructions) {
        const entries = instruction.entries;

        if (entries) {
            for (const entry of entries) {
                if (entry.entryId.startsWith("tweet")) {
                    const tweet = entry.content?.itemContent?.tweet_results.result;
                    if (tweet) {
                        const user = tweet.core.user_results.result;
                        const note = tweet.note_tweet?.note_tweet_results.result.text;
                        const parsedTweet: ParsedTweet = {
                            createdAt: tweet.legacy.created_at,
                            text: note ?? tweet.legacy.full_text,
                            image: tweet.legacy.extended_entities?.media[0]?.media_url_https,
                            id: tweet.legacy.id_str,
                            restId: tweet.rest_id,
                            username: user.legacy.name,
                        };

                        parsedTweets.push(parsedTweet);
                    }
                }
            }
        }
    }

    return parsedTweets;
}
